"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startClusterMode = startClusterMode;
const cluster_1 = __importDefault(require("cluster"));
const os_1 = __importDefault(require("os"));
const index_1 = require("./index");
/**
 * ูุญุฏุฉ ุงููุฌููุนุฉ - ุชุณูุญ ุจุชุดุบูู ุงูุณูุฑูุฑ ุนูู ุนุฏุฉ ูุซููุงุช ูู ููุณ ุงููุงูููุฉ
 * ูุงุณุชุบูุงู ุฌููุน ุฃูููุฉ ุงููุนุงูุฌ
 */
// ุนุฏุฏ ุงูุนูููุงุช ุงููุฑุนูุฉ ููุฅูุดุงุก (1 ููู ููุงุฉ)
const WORKERS_COUNT = os_1.default.cpus().length;
/**
 * ุชุดุบูู ุงูุณูุฑูุฑ ูู ูุถุน ุงููุฌููุนุฉ
 * ูุฐู ุงููุธููุฉ ุชููู ุจุฅูุดุงุก ุณูุฑูุฑ ุนูุฏ ุงุณุชุฏุนุงุฆูุง
 * ูู ูุถุน ุงููุฌููุนุฉ: ุชููู ุงูุนูููุฉ ุงูุฑุฆูุณูุฉ ุจุฅูุดุงุก ุนูููุงุช ูุฑุนูุฉ
 * ูู ูุถุน ุงูุนุงูู: ุชููู ุจุชุดุบูู ุงูุณูุฑูุฑ
 */
function startClusterMode() {
    // ุฅุฐุง ูุงู ุงูุนูููุฉ ุงูุญุงููุฉ ูู ุงูุนูููุฉ ุงูุฑุฆูุณูุฉ
    if (cluster_1.default.isPrimary) {
        console.log(`๐ Master ${process.pid} is running`);
        console.log(`Creating ${WORKERS_COUNT} workers...`);
        // ุชุชุจุน ุฅุนุงุฏุฉ ุชุดุบูู ุงูุนูุงู
        let restartCount = 0;
        const maxRestarts = 20;
        const restartInterval = 60000; // 1 ุฏูููุฉ
        let lastRestartTime = Date.now();
        // ุฅูุดุงุก ุนูููุงุช ูุฑุนูุฉ
        for (let i = 0; i < WORKERS_COUNT; i++) {
            cluster_1.default.fork();
        }
        // ุณุฌู ุนูุฏูุง ูุจุฏุฃ ุนุงูู ุฌุฏูุฏ
        cluster_1.default.on('online', (worker) => {
            console.log(`Worker ${worker.process.pid} is online`);
        });
        // ุฅุนุงุฏุฉ ุชุดุบูู ุงูุนูุงู ุนูุฏ ุงูุฎุฑูุฌ
        cluster_1.default.on('exit', (worker, code, signal) => {
            console.log(`Worker ${worker.process.pid} died with code ${code} and signal ${signal}`);
            // ุฅุนุงุฏุฉ ุถุจุท ุนุฏุงุฏ ุฅุนุงุฏุฉ ุงูุชุดุบูู ุฅุฐุง ูุฑุช ูุชุฑุฉ ูุงููุฉ
            if (Date.now() - lastRestartTime > restartInterval) {
                restartCount = 0;
                lastRestartTime = Date.now();
            }
            // ุฅุนุงุฏุฉ ุชุดุบูู ุฅุฐุง ูู ูุชุฌุงูุฒ ุงูุญุฏ ุงูุฃูุตู
            if (restartCount < maxRestarts) {
                console.log(`Restarting worker... (restart ${restartCount + 1}/${maxRestarts})`);
                cluster_1.default.fork();
                restartCount++;
            }
            else {
                console.error(`Too many worker restarts (${restartCount}), not restarting.`);
            }
        });
        // ุชูุธูู ุฏูุฑู
        setInterval(() => {
            const memoryUsage = process.memoryUsage();
            console.log(`Master memory usage: ${Math.round(memoryUsage.rss / 1024 / 1024)}MB`);
        }, 300000); // ูู 5 ุฏูุงุฆู
    }
    else {
        // ุงูููุฏ ูุชู ุชูููุฐู ูู ุงูุนูููุงุช ุงููุฑุนูุฉ
        startWorker();
    }
}
// ุชุดุบูู ุงูุณูุฑูุฑ ูู ุงูุนูููุฉ ุงููุฑุนูุฉ
function startWorker() {
    const PORT = parseInt(process.env.PORT || '3000', 10);
    // ุฅูุดุงุก ุณูุฑูุฑ ูุน ุงูุฎูุงุฑุงุช ุงูููุงุณุจุฉ ููุถุน ุงููุฌููุนุฉ
    const { server } = (0, index_1.createServer)();
    server.listen(PORT, () => {
        console.log(`Worker ${process.pid} started server on port ${PORT}`);
    });
    // ุงูุชุนุงูู ูุน ุงูุฃุฎุทุงุก ุบูุฑ ุงููุนุงูุฌุฉ
    process.on('uncaughtException', (err) => {
        console.error(`Uncaught exception in worker ${process.pid}:`, err);
    });
    process.on('unhandledRejection', (reason, promise) => {
        console.error(`Unhandled rejection in worker ${process.pid}:`, reason);
    });
}
